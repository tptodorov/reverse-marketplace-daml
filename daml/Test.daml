module Test where

import Cash
import Shipment
import DA.Date
import Order
import Daml.Script


test_successful_workflow = script do

  (buyer, supplier, supplier2, courier, rfqCid, orderId, quoteCid) <- setup_rfq_and_quote

  -- buyer reviews the quote and loves the costs
  Some quote <- queryContractId buyer quoteCid  
  totalCost <- submit buyer do
    exerciseCmd quoteCid Quote_TotalCost 
  assert (totalCost == Cash with currency = USD, amount = 110.0)
  
  -- buyer places an order
  orderCid <- submit buyer do
    exerciseCmd quoteCid Quote_Accept 
  Some orderBuyer <- queryContractId buyer orderCid
  assert (orderBuyer.status == PRODUCTION)

  -- supplier runs the production of the order and then ships it
  Some orderSupplier <- queryContractId supplier orderCid
  submit supplier do
    exerciseCmd orderCid Order_Shipped 
  -- courier updates tracking data
  orderCid <- submit courier do
    exerciseByKeyCmd @Shipment (orderId, supplier)  Shipment_Tracked  
      with trackingUpdate = "tracking-123"


  -- buyer can see the updated state and tracking
  Some (_,orderBuyer) <- queryContractKey @Order buyer (orderId, supplier)
  assert (orderBuyer.status == SHIPPED)
  Some (_,shippingBuyer) <- queryContractKey @Shipment buyer (orderId, supplier)
  assert (shippingBuyer.tracking /= None)

  submit buyer do
    exerciseByKeyCmd @Order (orderId, supplier)  Order_Delivered  

  return ()


test_buyer_discard_quote = script do

  (buyer, supplier, supplier2, courier, rfqCid, orderId, quoteCid) <- setup_rfq_and_quote

  -- buyer reviews the quote but hates the costs
  Some quote <- queryContractId buyer quoteCid  
  totalCost <- submit buyer do
    exerciseCmd quoteCid Quote_TotalCost 
  assert (totalCost == Cash with currency = USD, amount = 110.0)
  _ <- submit buyer do
    exerciseCmd quoteCid Quote_Decline 

  return ()

test_order_expired = script do

  (buyer, supplier, supplier2, courier, rfqCid, orderId, quoteCid) <- setup_rfq_and_quote

  -- buyer reviews the quote and loves the costs
  Some quote <- queryContractId buyer quoteCid  
  totalCost <- submit buyer do
    exerciseCmd quoteCid Quote_TotalCost 
  assert (totalCost == Cash with currency = USD, amount = 110.0)
  
  -- buyer places an order
  orderCid <- submit buyer do
    exerciseCmd quoteCid Quote_Accept 
  Some orderBuyer <- queryContractId buyer orderCid
  assert (orderBuyer.status == PRODUCTION)

  -- buyer expires the order 
  _ <- submit buyer do
    exerciseCmd orderCid Order_Expired
  Some (_,orderBuyer) <- queryContractKey @Order buyer (orderId, supplier)
  assert (orderBuyer.status == FAILED)

  return ()


setup_rfq_and_quote = script do 
  buyer <- allocateParty "Buyer"
  supplier <- allocateParty "Supplier"
  supplier2 <- allocateParty "Supplier2"
  courier <- allocateParty "DHL"
  
  now <- getTime
  let deadline10days = addDays (toDateUTC now) 10

  -- buyer issues a RFQ for manufacturing of specific product
  rfqCid <- submit buyer do
    createCmd RFQ with
      buyer = buyer
      suppliers = [supplier, supplier2]
      product = "Screws (KG)"
      units = 100.0
      deadline = deadline10days 

  -- ID generated by supplier
  let orderId = "1234576"

  -- supplier negotiates shipping contract with courier
  shipmentProposalCid <- submit courier do
    createCmd ShipmentProposal with
      reference = orderId
      buyer = buyer
      supplier = supplier
      courier = courier
      shippingCost = Cash with currency = USD, amount = 10.0

  -- supplier provides a quote that partially matches the RFQ
  Some rfq <- queryContractId buyer rfqCid
  quoteCid <- submit supplier do
    createCmd Quote with
      rfqCid = rfqCid
      offer = Order with 
        id = orderId
        buyer = rfq.buyer
        supplier = supplier
        product = "Screws-sku-123" -- supplier has SKU for the requested product
        deadline = rfq.deadline 
        units = rfq.units/2.0 -- supplier can only produce part of the requested
        intermediaries = [] -- we don't know them yet
        cost = Cash with currency = USD, amount = 100.0
        status = PRODUCTION
        shipmentProposalCid

  return (buyer, supplier, supplier2, courier, rfqCid, orderId, quoteCid)
